package org.firstinspires.ftc.teamcode;

import android.annotation.SuppressLint;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;

@TeleOp(name = "SidCode_New", group = "Linear OpMode")
public class SidCode extends LinearOpMode {

    private DcMotor leftHorizSlide;
    private DcMotor leftSlide;
    private DcMotor rightSlide;
    private DcMotor left_back;
    private DcMotor left_front;
    private DcMotor right_back;
    private DcMotor right_front;

    // Instance of the new FrontGrabber class
    private FrontGrabber frontGrabber;
    // Instance of the new RobotArm class
    private RobotArm robotArm;

    // Renamed to avoid conflict with enum 'Position'
    // private Position currentArmPosition; // Moved to RobotArm

    private static final double SLIDE_HOLDING_POWER = -0.15;
    private static final double JOYSTICK_DEADBAND = 0.1;

    // Position enum moved to RobotArm class
    // public enum Position { ... }

    // Grabber methods moved to FrontGrabber class
    // public void initGrabber(double close, double open, Servo servo){ ... }
    // public void closeGrabber(){ ... }
    // public void openGrabber(){ ... }
    // public boolean isGrabberClosed() { ... }

    // Arm methods moved to RobotArm class
    // public void initArm(HardwareMap hmap){ ... }
    // public void setArmToPreset(Position position){ ... }
    // public Position getArmPreset(){return currentArmPosition;}
    // public void setArmServoPosition(double position){ ... }
    // public void setWristServoPosition(double position){ ... }
    // private int getIndexOfPreset(Position preset){ ... }
    // public void incrementArmPreset(int amount){ ... }
    // @SuppressLint("DefaultLocale")
    // public String getArmTelemetry(){ ... }


    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Robot Ready");
        telemetry.update();

        left_back = hardwareMap.get(DcMotor.class, "left_back");
        left_front = hardwareMap.get(DcMotor.class, "left_front");
        right_back = hardwareMap.get(DcMotor.class, "right_back");
        right_front = hardwareMap.get(DcMotor.class, "right_front");

        leftHorizSlide = hardwareMap.get(DcMotor.class, "leftHorizSlide");
        leftSlide = hardwareMap.get(DcMotor.class, "leftSlide");
        rightSlide = hardwareMap.get(DcMotor.class, "rightSlide");

        left_back.setDirection(DcMotor.Direction.REVERSE);
        left_front.setDirection(DcMotor.Direction.REVERSE);
        right_back.setDirection(DcMotor.Direction.FORWARD);
        right_front.setDirection(DcMotor.Direction.FORWARD);
        leftHorizSlide.setDirection(DcMotor.Direction.FORWARD);
        leftSlide.setDirection(DcMotor.Direction.FORWARD);
        rightSlide.setDirection(DcMotor.Direction.REVERSE);

        leftSlide.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightSlide.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        // Initialize the FrontGrabber instance
        frontGrabber = new FrontGrabber(hardwareMap, "frontGrabberServo", 0.70, 1.0);
        // Initialize the RobotArm instance
        robotArm = new RobotArm(hardwareMap);

        waitForStart();

        while (opModeIsActive()) {
            double drive = -gamepad1.left_stick_y;
            double strafe = gamepad1.left_stick_x;
            double turn = gamepad1.right_stick_x;

            double leftFrontPower = drive + turn + strafe;
            double leftBackPower = drive + turn - strafe;
            double rightFrontPower = drive - turn - strafe;
            double rightBackPower = drive - turn + strafe;

            left_front.setPower(leftFrontPower);
            left_back.setPower(leftBackPower);
            right_front.setPower(rightFrontPower);
            right_back.setPower(rightBackPower);

            if (gamepad2.dpad_up) {
                leftHorizSlide.setPower(0.5);
                gamepad2.rumble(0.2, 0.2, 50);
            } else if (gamepad2.dpad_down) {
                leftHorizSlide.setPower(-0.5);
                gamepad2.rumble(0.2, 0.2, 50);
            } else {
                leftHorizSlide.setPower(0);
                gamepad2.rumble(0, 0, 0);
            }

            double leftSlidePower = -gamepad2.left_stick_y;

            if (Math.abs(leftSlidePower) < JOYSTICK_DEADBAND) {
                leftSlidePower = SLIDE_HOLDING_POWER;
            }

            leftSlide.setPower(leftSlidePower);
            rightSlide.setPower(leftSlidePower);

            // Using the FrontGrabber instance for grabber control
            if (gamepad1.a) {
                if (frontGrabber.isGrabberClosed()) {
                    frontGrabber.openGrabber();
                } else {
                    frontGrabber.closeGrabber();
                }
                sleep(250);
            }
            // The following duplicate block was removed.
            // if (gamepad1.a) {
            //    if (frontGrabber.isGrabberClosed()) {
            //        frontGrabber.openGrabber();
            //    } else {
            //        frontGrabber.closeGrabber();
            //    }
            //    sleep(250);
            // }

            // Original gamepad2.a and gamepad2.b for grabber control
            if (gamepad2.a) {
                frontGrabber.openGrabber();
                sleep(250);
            }

            if (gamepad2.b) {
                frontGrabber.closeGrabber();
                sleep(250);
            }

            // Using the RobotArm instance for arm and wrist control
            if (gamepad2.right_trigger > 0.1) {
                robotArm.setArmToPreset(RobotArm.Position.HANG_SPECIMEN);
                sleep(200);
            } else if (gamepad2.left_trigger > 0.1) {
                robotArm.setArmToPreset(RobotArm.Position.GRAB_FROM_WALL);
                sleep(200);
            }

            if (gamepad1.dpad_up) robotArm.setArmToPreset(RobotArm.Position.HANG_PREP);

            telemetry.addData("LeftFront Power", leftFrontPower);
            telemetry.addData("LeftBack Power", leftBackPower);
            telemetry.addData("RightFront Power", rightFrontPower);
            telemetry.addData("RightBack Power", rightBackPower);
            telemetry.addData("Slide Power", leftSlidePower);
            // Using the FrontGrabber instance for telemetry
            telemetry.addLine(frontGrabber.isGrabberClosed() ? "Grabber: CLOSED" : "Grabber: OPEN");
            // Using the RobotArm instance for telemetry
            telemetry.addLine(robotArm.getArmTelemetry());
            telemetry.update();
        }
    }
}
